<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.meongnyang.shop.repository.StockMapper">

    <resultMap id="stockDataResultMap" type="com.meongnyang.shop.entity.Stock">
        <id property="id" column="id" />
        <result property="" column="productId" />
        <result property="" column="productName" />
        <result property="" column="currentStock" />
        <result property="" column="expectedStock" />
        <result property="" column="minAlertQuantity" />
        <result property="" column="alertSetting" />
        <result property="" column="hidden" />
        <result property="" column="stockDetails" />
    </resultMap>

    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        insert into stock_tb
        values(default, #{productId}, #{currentStock}, #{expectedStock}, #{minAlertQuantity}, #{alertSetting}, #{hidden})
    </insert>
    <update id="modifyStockByProductId">
        update stock_tb
        set
            current_stock = #{currentStock},
            expected_stock = #{expectedStock},
            min_alert_quantity = #{minAlertQuantity},
            alert_setting = #{alertSetting},
            hidden = #{hidden}
        where
            product_id = #{productId}
    </update>
    <update id="modifyStockById">
        update stock_tb
        set
            current_stock = #{currentStock},
            expected_stock = #{expectedStock},
            min_alert_quantity = #{minAlertQuantity},
            alert_setting = #{alertSetting},
            hidden = #{hidden}
        where
            id = #{id}
    </update>
    <delete id="deleteStockByProductId">
        delete
        from
            stock_tb
        where
            product_id = #{productId}
    </delete>
    <delete id="deleteStockAll">
        truncate table stock_tb;
    </delete>
    <select id="findStockAll" resultType="com.meongnyang.shop.entity.Stock">
        select
            s.id,
            s.product_id as productId,
            p.product_name as productName,
            s.current_stock as currentStock,
            s.expected_stock as expectedStock,
            s.min_alert_quantity as minAlertQuantity,
            s.alert_setting as alertSetting,
            s.hidden,
            sdt.arrival_date as arrivalDate,
            sdt.arrival_quantity as arrivalQuantity
        from
            stock_tb s
            left outer join product_tb p on(s.product_id = p.id)
            left outer join stock_detail_tb sdt on(s.id = sdt.stock_id)
    </select>
    <select id="findStockByOption" resultType="com.meongnyang.shop.entity.Stock">
        select
            s.id,
            s.product_id as productId,
            p.product_name as productName,
            s.current_stock as currentStock,
            s.expected_stock as expectedStock,
            s.min_alert_quantity as minAlertQuantity,
            s.alert_setting as alertSetting,
            s.hidden
        from
            stock_tb s
            left outer join product_tb p on(s.product_id = p.id)
        where
            1 = 1
            <if test='option.equals("전체")'>
                and (
                    s.product_id like concat('%', trim(ifnull(#{searchWord}, '')), "%")
                    or p.product_name like concat('%', trim(ifnull(#{searchWord}, '')), "%")
                )
            </if>
            <if test='option.equals("상품코드")'>
                and (
                    s.product_id like concat('%', trim(ifnull(#{searchWord}, '')), "%")
                )
            </if>
            <if test='option.equals("상품명")'>
                and (
                    p.product_name like concat('%', trim(ifnull(#{searchWord}, '')), "%")
                )
            </if>
        limit #{startIndex}, #{limit}
    </select>
    <select id="findStockByProductId" resultType="com.meongnyang.shop.entity.Stock">
        select
            s.id,
            s.product_id as productId,
            p.product_name as productName,
            s.current_stock as currentStock,
            s.expected_stock as expectedStock,
            s.min_alert_quantity as minAlertQuantity,
            s.alert_setting as alertSetting,
            s.hidden,
            sdt.arrival_date as arrivalDate,
            sdt.arrival_quantity as arrivalQuantity
        from
            stock_tb s
            left outer join product_tb p on(s.product_id = p.id)
            left outer join stock_detail_tb sdt on(s.id = sdt.stock_id)
        where
            product_id = #{productId}
    </select>
    <select id="getAllCount" resultType="java.lang.Integer">
        select
            count(*)
        from
            stock_tb s
            left outer join product_tb p on(s.product_id = p.id)
        where
        1 = 1
            <if test='option.equals("전체")'>
                and (
                    s.product_id like concat('%', trim(ifnull(#{searchWord}, '')), "%")
                    or p.product_name like concat('%', trim(ifnull(#{searchWord}, '')), "%")
                )
            </if>
            <if test='option.equals("상품코드")'>
                and (
                    s.product_id like concat('%', trim(ifnull(#{searchWord}, '')), "%")
                )
            </if>
            <if test='option.equals("상품명")'>
                and (
                    p.product_name like concat('%', trim(ifnull(#{searchWord}, '')), "%")
                )
            </if>
    </select>
    <select id="getDashboardStockStatus"
            resultType="com.meongnyang.shop.dto.response.admin.RespDashboardDto$StockStatus">
        select
            st.product_id productId,
            pt.product_name productName,
            st.current_stock currentStock,
            st.expected_stock expectedStock
        from
            stock_tb st
            left outer join product_tb pt on(pt.id = st.product_id)
        where
            st.expected_stock <![CDATA[<=]]> min_alert_quantity
        limit 0, 7
    </select>
</mapper>